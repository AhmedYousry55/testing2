// was in the tour controller to check the id of the parameter if the user want to get a tour that is Invalid
exports.checkID = (req, res, next, val) => {
  console.log(`the parameter is ${val}`);
  if (req.params.id * 1 > tours.length) {
    return res.status(400).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }
  next();
};



exports.createTour = (req, res) => {
  // const newId = tours[tours.length - 1].id + 1;
  // //object.assign: lets you assign or add two objects in one object.
  // const newTour = { id: newId, ...req.body };
  // tours.push(newTour);

  // fs.writeFile(
  //   `${__dirname}/dev-data/data/tours-simple.json`,
  //   JSON.stringify(tours),
  //   (err) => {
      res.status(201).json({
        status: 'success',
        // data: {
        //   tour: newTour,
        // },
      });
  //   }
  // );
};



exports.getOneTour = (req, res) => {
  console.log(req.params);
  const id = req.params.id * 1;
  //find:is a methid that loops in an array ane returns an array of only the elemet that meets the condition of the call back function.
  // const tour = tours.find((el) => el.id === id);
  // // if (id > tours.length) {
  // res.status(200).json({
  //   status: 'success',
  //   data: {
  //     tour,
  //   },
  // });
};


exports.checkBody = (req, res, next) => {
  if (!req.body.name || !req.body.price)
    return res.status(404).json({
      ststus: 'failed',
      message: 'please insert the name and the price',
    });
  next();
};

//method to handle the errors 

// try {

}catch (err){}




exports.login = (req,res,next)=>{
  const {email, password}
}



//////////////////////////////////////////////////

/////My tour model


const mongoose = require('mongoose');

const tourSchema = new mongoose.Schema({
    name: {
      type: String,
      required: [true, 'A tour must have a name !'],
      unique: true,
      trim: true,
    },
    
    duration:{
      type:Number,
      required:[true , 'A tour must have a duration']
    },
    
    maxGroupSize :{
      type:Number,
      required:[true ,  ' A tour must have a size'],
    },

    difficulty:{
      type:String,
      required:[true , 'A tour must have a difficulty'],
    },

    ratingsAverage:{
      type: Number,
      default:4.5
    },
    
    ratingsQuantity: {
      type: Number,
      default: 0,
    },
  
    price: {
      type: Number,
      required: [true, 'A tour must have a price !'],
    },

    priceDiscount: Number,

    summary:{
      type:String,
      trim:true,
      required:[true, 'A tour must have a summary']
    },
    description:{
      type: String,
      trim:true
    },

    imageCover:{
      type:String,
      required:[true, 'A tour must have a cover image'],
    },

    images:[String],
//this field gets added automatically at the time the user gets a new tour
    createdAt:{
      type:Date,
      default:Date.now(),
    },

    startLocation:{
      type:{
        type:String,
        default:'point',
        enum:['point']
      },
      coordinates:[Number],
      address:String,
      description:String,
    },

    Locations:[
      {
        type:{
          type:String,
          default:'point',
          enum:['point'],
        },
        coordinates:[Number],
        address:String,
        description:String,
        day:[Number],
      },

    ],

    startDates:[Date],

  });

  const Tour = mongoose.model('Tour', tourSchema);

  // const newTour = new Tour({})

  //newTour.save().then(doc =>{console.log(doc)}).catch(err=>{console.log(err)});



  module.exports = Tour;