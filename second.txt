// old user model to import it into my project
const mongoose = require('mongoose');
const validator = require('validator');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'please provide your name'],
  },
  email: {
    type: String,
    required: [true, 'please provide your emial'],
    unique: true,
    validate: [validator.isEmail, 'please provide a valid email'],
    lowercase: true,
  },

  photo: {
    type: String,
  },

  role: {
    type: String,
    enum: ['user', 'guide', 'lead-guide', 'admin'],
    default :'user',
  },

  password: {
    type: String,
    required: [true, 'please provide a password'],
    minlength: 8,
    select: false,
  },

  passwordConfirm: {
    type: String,
    require: [true, 'please confirm your password'],
    validate: {
      //Onlu works on create and save
      validator: function (el) {
        return el === this.password;
      },
      message: 'passwords are not the same !',
    },
  },

  passwordChangedAt: Date,
});

//Moongose pres ave middleware that hashes the data between the time we recieve the data and the time it's saved in the databse
userSchema.pre('save', async function (next) {
  //only run this function if the password was actually modified
  if (!this.isModified('password')) return next();
  //hash the password
  this.password = await bcrypt.hash(this.password, 12);
  //not to save passwordConfirm to the databse

  this.passwordConfirm = undefined;

  next();
});

userSchema.methods.correctPassword = async function (
  candidatePassword,
  userPassword
) {
  return await bcrypt.compare(candidatePassword, userPassword);
};
//if This below function returnn false that means that the user hasn't changed their password

userSchema.methods.changedPasswordAfter = function (JWTTimestamp) {
  if (this.passwordChangedAt) {
    const changedDate = parseInt(this.passwordChangedAt.getTime() / 1000, 10);
    console.log(changedDate, JWTTimestamp);
    return JWTTimestamp < changedDate; // 100 < 200
  }
  //False means password is not changed
  return false;
};

const User = new mongoose.model('User', userSchema);

module.exports = User;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////MY TOUR CONTROLLER ////////////////////////////////////////////



const fs = require('fs');
const { findByIdAndDelete } = require('./../models/tourmodel');
const Tour = require('./../models/tourmodel');
const { match } = require('assert');
const catchAsync = require('./../utils/catchAsync');

// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`)
// );

exports.getAllTours = catchAsync(async (req, res,next) => {
    //Buuild the query
    //1A) Filtering
    const queryObj = { ...req.query };
    const excludedField = ['page', 'sort', 'limit', 'fields'];
    excludedField.forEach((el) => delete queryObj[el]);
    console.log(req.query);
    // console.log(queryObj)

    // 1B) Advanced Filtering

    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(lte|lt|gte|gt)\b/g, (match) => `$${match}`);

    console.log(JSON.parse(queryStr));

    let query = Tour.find(JSON.parse(queryStr));

    //2)Sorting
    if (req.query.sort) {
      let sortBy = req.query.sort.split(',').join(' ');
      // console.log(sortBy);
      query = query.sort(sortBy);
    }

    // 3) limiting Fields

    //Execute the query
    const tours = await query;

    ///// (ANOTHER WAY TO QUERY OBJECTS IN MOONGOOSE)
    // const query = Tour.find()
    //   .where('duration')
    //   .equals(5)
    //   .where('difficulty')
    //   .equals('easy');
    // console.log(req.requestTime);

    //Send the response
    res.status(200).json({
      status: 'success',
      // requestedAt: req.requestTime,
      results: tours.length,
      data: {
        tours,
      },
    });
  
})

exports.getOneTour = async (req, res) => {
  try {
    const tour = await Tour.findById(req.params.id);
    //Tour.findOne({_id :req.params.id})
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'failed',
      message: err,
    });
  }
  // console.log(req.params);
  // const id = req.params.id * 1;
};

exports.createTour = async (req, res) => {
  try {
    // const newTour = new Tour({})

    //newTour.save()

    newTour = await Tour.create(req.body);

    res.status(201).json({
      status: 'success',
      data: {
        tour: newTour,
      },
    });
  } catch (err) {
    res.status(400).send({
      status: 'failed',
      message: err,
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'faied',
      message: err,
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(204).json({
      status: 'success',
      data: null,
    });
  } catch (err) {
    res.status(400).json({
      status: 'failed',
      message: err,
    });
  }
};



////////////////////////////////////////////////////////////////////////



///////////////////////////////// MY TOUR ROUTES///////////////////////////////////////////



const express = require('express');

const router = express.Router();

const tourControllers = require('./../controllers/tourControllers.js');
const authController = require('./../controllers/authController');

// router.param('id', tourControllers.checkID);

router
  .route('/')
  .get(
    authController.protect,
    authController.restrictTo('lead-guide','admin'),
    tourControllers.getAllTours
  )
  .post(tourControllers.createTour);
router
  .route('/:id')
  .get(tourControllers.getOneTour)
  .patch(tourControllers.updateTour)
  .delete(tourControllers.deleteTour);

module.exports = router;
